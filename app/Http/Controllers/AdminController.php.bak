<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Intervention\Image\ImageManagerStatic as Image;
use Storage;
use Auth, Validator;
use App\User;
use App\Kycinformations;
use DB;

class AdminController extends Controller
{
    public function __construct()
    {
        $this->user = new User();
		$this->kycinformations = new Kycinformations();
    }    
	public function index(){
	
		$this->data['title'] = 'Home';
		return view('admin.index', $this->data);
	}
	public function myprofile(){
		//echo auth::user()->id; exit;
		$this->data['title'] = 'My Profile';
		return view('admin.myprofile', $this->data);
	}
	public function updateprofile(Request $request){
		$user = User::where('id',auth::user()->id)->first();
		$user->name = $request->input('name'); 
		$user->email = $request->input('email'); 
		$user->mobile = $request->input('mobile');
		$user->status = $request->input('status');
	$image = $profile_images = '';   
	   if ($request->file('profile_image')) {
		$image = $request->file('profile_image');
		$profile_images = 'Profile_image' . time() . '_' . $image->getClientOriginalName();
		$image_resize = Image::make($image->getRealPath());              
		$image_resize->save(storage_path('app/public/profileimage/' .$profile_images));
		 $user->profile_image = $profile_images;
	}
		$user->save();
		return redirect()->back()->with('message', 'Successfully profile is update...');  		
	}
	public function resetpassword(Request $request){
		$this->data['title'] = 'Reset Password';
		return view('admin.resetpassword', $this->data);		
	}
	public function updatepassword(Request $request){
		$validator  =   Validator::make($request->all(), [
			 'current_password'     =>  'required',
			 'new_password'    =>  'required',
			 'new_confirm_password'   =>  'same:new_password',
		 ]);                                                                                                                                                                                                                               
		if ($validator->fails()) {
			   $messages = $validator->messages();
			   return redirect()->back()->withErrors($messages)->withInput($request->all()); 
		 }   
		 if (!Hash::check($request->current_password, auth()->user()->password)) { 
		 
			return redirect()->back()->with('message', 'Current password is wrong...'); 
			
		 }
        User::find(auth()->user()->id)->update(['password'=> Hash::make($request->new_password)]);
		
		return redirect()->back()->with('message', 'Successfully password is updated...');  		
	}
	public function listkycinformations()
    {
        $this->data['kycinformations'] = $this->kycinformations->get();
        return view('admin.list-kycinformations',$this->data);
    }
    public function savekycinformations(Request $request)
    {
        if ($request->input("id") != 0) {
            $kycinformations = Kycinformations::where('id', $request->input('id'))->first();
        } else {
            $kycinformations = new Kycinformations();
        }
		
        $kycinformations->aadharfront = $request->input('aadharfront');
        $kycinformations->aadharback = $request->input('aadharback');
		$kycinformations->aadharnumber = $request->input('aadharnumber');
		$kycinformations->panfront = $request->input('panfront');
		$kycinformations->panback = $request->input('panback');
		$kycinformations->pannumber = $request->input('pannumber');
        if ($kycinformations->save()) {
            return redirect('/list-kycinformations')->withErrors(['sucessfully updated',]);
        } else {
            return redirect('/list-kycinformations')->withErrors(['Failed']);
        }
    }
	public function deletekycinformations($id){
		$kycinformations = $this->kycinformations->where('id',$id)->delete();
		return redirect('/admin/list-contactus');
	}
	public function listuser(){
		$this->data['user'] = User::where('role',0)->get();
		return view('admin.list-user',$this->data);
	}
    public function saveuser(Request $request)
    {
        if ($request->input("id") != 0) {
           $user = User::where("id", $request->input("id"))->first();
        } else {
            $user = new User();
        }
		$user->dream_id = $request->input('dream_id');
		$user->name = $request->input('name');
		$user->email = $request->input('email');
		$user->mobile = $request->input('mobile');
	    $user->bank_account = $request->input('bank_account');
        $user->amount = $request->input('amount');
        $user->save();
       return redirect('/admin/list-user')->with('message','List User successfully Save...');
    }
     public function edituser($id)
    {
        $this->data["users"] = $this->user->where("id", $id)->first();
        return view('admin.edit-user',$this->data);
    }
   
	public function deleteuser($id){
		$user = $this->user->where('id',$id)->delete();
		return redirect('/admin/list-user');
	}

}
